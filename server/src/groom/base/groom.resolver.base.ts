/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Groom } from "./Groom";
import { GroomCountArgs } from "./GroomCountArgs";
import { GroomFindManyArgs } from "./GroomFindManyArgs";
import { GroomFindUniqueArgs } from "./GroomFindUniqueArgs";
import { CreateGroomArgs } from "./CreateGroomArgs";
import { UpdateGroomArgs } from "./UpdateGroomArgs";
import { DeleteGroomArgs } from "./DeleteGroomArgs";
import { GroomService } from "../groom.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Groom)
export class GroomResolverBase {
  constructor(
    protected readonly service: GroomService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Groom",
    action: "read",
    possession: "any",
  })
  async _groomsMeta(
    @graphql.Args() args: GroomCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Groom])
  @nestAccessControl.UseRoles({
    resource: "Groom",
    action: "read",
    possession: "any",
  })
  async grooms(@graphql.Args() args: GroomFindManyArgs): Promise<Groom[]> {
    return this.service.grooms(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Groom, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Groom",
    action: "read",
    possession: "own",
  })
  async groom(
    @graphql.Args() args: GroomFindUniqueArgs
  ): Promise<Groom | null> {
    const result = await this.service.groom(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Groom)
  @nestAccessControl.UseRoles({
    resource: "Groom",
    action: "create",
    possession: "any",
  })
  async createGroom(@graphql.Args() args: CreateGroomArgs): Promise<Groom> {
    return await this.service.createGroom({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Groom)
  @nestAccessControl.UseRoles({
    resource: "Groom",
    action: "update",
    possession: "any",
  })
  async updateGroom(
    @graphql.Args() args: UpdateGroomArgs
  ): Promise<Groom | null> {
    try {
      return await this.service.updateGroom({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Groom)
  @nestAccessControl.UseRoles({
    resource: "Groom",
    action: "delete",
    possession: "any",
  })
  async deleteGroom(
    @graphql.Args() args: DeleteGroomArgs
  ): Promise<Groom | null> {
    try {
      return await this.service.deleteGroom(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
