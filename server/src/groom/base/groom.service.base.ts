/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Groom as PrismaGroom } from "@prisma/client";

export class GroomServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GroomCountArgs, "select">): Promise<number> {
    return this.prisma.groom.count(args);
  }

  async grooms<T extends Prisma.GroomFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GroomFindManyArgs>
  ): Promise<PrismaGroom[]> {
    return this.prisma.groom.findMany<Prisma.GroomFindManyArgs>(args);
  }
  async groom<T extends Prisma.GroomFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GroomFindUniqueArgs>
  ): Promise<PrismaGroom | null> {
    return this.prisma.groom.findUnique(args);
  }
  async createGroom<T extends Prisma.GroomCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GroomCreateArgs>
  ): Promise<PrismaGroom> {
    return this.prisma.groom.create<T>(args);
  }
  async updateGroom<T extends Prisma.GroomUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GroomUpdateArgs>
  ): Promise<PrismaGroom> {
    return this.prisma.groom.update<T>(args);
  }
  async deleteGroom<T extends Prisma.GroomDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GroomDeleteArgs>
  ): Promise<PrismaGroom> {
    return this.prisma.groom.delete(args);
  }
  async SearchGrooms(args: string): Promise<string[]> {
    throw new Error("Not implemented");
  }
  async ViewGroom(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
