/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BrideService } from "../bride.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BrideCreateInput } from "./BrideCreateInput";
import { Bride } from "./Bride";
import { BrideFindManyArgs } from "./BrideFindManyArgs";
import { BrideWhereUniqueInput } from "./BrideWhereUniqueInput";
import { BrideUpdateInput } from "./BrideUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BrideControllerBase {
  constructor(
    protected readonly service: BrideService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bride })
  @nestAccessControl.UseRoles({
    resource: "Bride",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBride(@common.Body() data: BrideCreateInput): Promise<Bride> {
    return await this.service.createBride({
      data: data,
      select: {
        age: true,
        createdAt: true,
        diet: true,
        drinkingHabits: true,
        educationLevel: true,
        email: true,
        ethnicity: true,
        familyDetails: true,
        height: true,
        hobbies: true,
        id: true,
        interests: true,
        languageSpoken: true,
        location: true,
        maritalStatus: true,
        name: true,
        occupation: true,
        phoneNumber: true,
        religion: true,
        smokingHabits: true,
        updatedAt: true,
        weight: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Bride] })
  @ApiNestedQuery(BrideFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bride",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async brides(@common.Req() request: Request): Promise<Bride[]> {
    const args = plainToClass(BrideFindManyArgs, request.query);
    return this.service.brides({
      ...args,
      select: {
        age: true,
        createdAt: true,
        diet: true,
        drinkingHabits: true,
        educationLevel: true,
        email: true,
        ethnicity: true,
        familyDetails: true,
        height: true,
        hobbies: true,
        id: true,
        interests: true,
        languageSpoken: true,
        location: true,
        maritalStatus: true,
        name: true,
        occupation: true,
        phoneNumber: true,
        religion: true,
        smokingHabits: true,
        updatedAt: true,
        weight: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bride",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bride(
    @common.Param() params: BrideWhereUniqueInput
  ): Promise<Bride | null> {
    const result = await this.service.bride({
      where: params,
      select: {
        age: true,
        createdAt: true,
        diet: true,
        drinkingHabits: true,
        educationLevel: true,
        email: true,
        ethnicity: true,
        familyDetails: true,
        height: true,
        hobbies: true,
        id: true,
        interests: true,
        languageSpoken: true,
        location: true,
        maritalStatus: true,
        name: true,
        occupation: true,
        phoneNumber: true,
        religion: true,
        smokingHabits: true,
        updatedAt: true,
        weight: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bride",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBride(
    @common.Param() params: BrideWhereUniqueInput,
    @common.Body() data: BrideUpdateInput
  ): Promise<Bride | null> {
    try {
      return await this.service.updateBride({
        where: params,
        data: data,
        select: {
          age: true,
          createdAt: true,
          diet: true,
          drinkingHabits: true,
          educationLevel: true,
          email: true,
          ethnicity: true,
          familyDetails: true,
          height: true,
          hobbies: true,
          id: true,
          interests: true,
          languageSpoken: true,
          location: true,
          maritalStatus: true,
          name: true,
          occupation: true,
          phoneNumber: true,
          religion: true,
          smokingHabits: true,
          updatedAt: true,
          weight: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bride",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBride(
    @common.Param() params: BrideWhereUniqueInput
  ): Promise<Bride | null> {
    try {
      return await this.service.deleteBride({
        where: params,
        select: {
          age: true,
          createdAt: true,
          diet: true,
          drinkingHabits: true,
          educationLevel: true,
          email: true,
          ethnicity: true,
          familyDetails: true,
          height: true,
          hobbies: true,
          id: true,
          interests: true,
          languageSpoken: true,
          location: true,
          maritalStatus: true,
          name: true,
          occupation: true,
          phoneNumber: true,
          religion: true,
          smokingHabits: true,
          updatedAt: true,
          weight: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
