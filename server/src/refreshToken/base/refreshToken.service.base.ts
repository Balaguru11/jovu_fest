/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RefreshToken as PrismaRefreshToken,
  User as PrismaUser,
} from "@prisma/client";

export class RefreshTokenServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RefreshTokenCountArgs, "select">
  ): Promise<number> {
    return this.prisma.refreshToken.count(args);
  }

  async refreshTokens<T extends Prisma.RefreshTokenFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefreshTokenFindManyArgs>
  ): Promise<PrismaRefreshToken[]> {
    return this.prisma.refreshToken.findMany<Prisma.RefreshTokenFindManyArgs>(
      args
    );
  }
  async refreshToken<T extends Prisma.RefreshTokenFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefreshTokenFindUniqueArgs>
  ): Promise<PrismaRefreshToken | null> {
    return this.prisma.refreshToken.findUnique(args);
  }
  async createRefreshToken<T extends Prisma.RefreshTokenCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefreshTokenCreateArgs>
  ): Promise<PrismaRefreshToken> {
    return this.prisma.refreshToken.create<T>(args);
  }
  async updateRefreshToken<T extends Prisma.RefreshTokenUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefreshTokenUpdateArgs>
  ): Promise<PrismaRefreshToken> {
    return this.prisma.refreshToken.update<T>(args);
  }
  async deleteRefreshToken<T extends Prisma.RefreshTokenDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefreshTokenDeleteArgs>
  ): Promise<PrismaRefreshToken> {
    return this.prisma.refreshToken.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.refreshToken
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
